# mi_api_etl/swagger.yaml

openapi: 3.0.0
info:
  title: API de Gestión de ETLs y Permisos (Manual)
  version: "1.0.0" # La versión de tu API
  description: |
    Documentación interactiva para la API de gestión de ETLs, usuarios, permisos y reportes.
    Especificación mantenida manualmente.
  contact:
    name: Equipo de Desarrollo API ETLs
    # email: tu_email@example.com

servers:
  - url: http://localhost:3000/api # Ajusta el puerto si es diferente
    description: Servidor de Desarrollo Local

tags:
  - name: Usuarios
    description: Gestión de usuarios y sus permisos de acceso a ETLs
  - name: ETLs
    description: Gestión de los procesos ETL (Crear, Listar, Editar, Eliminar)
  - name: Reportes
    description: Consulta de reportes de ejecución de ETLs

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Token JWT necesario. Formato: Bearer {token}'

  schemas:
    Error:
      type: object
      properties:
        mensaje:
          type: string
          description: Mensaje descriptivo del error.
          example: Recurso no encontrado.
      required:
        - mensaje

    MensajeExito:
      type: object
      properties:
        mensaje:
          type: string
          example: Operación realizada exitosamente.

    Usuario:
      type: object
      properties:
        id: { type: integer, example: 1 }
        nombre: { type: string, example: 'juan_perez' }
        rol: { type: string, example: 'Consultor', nullable: true }
        createdAt: { type: string, format: 'date-time' }
        updatedAt: { type: string, format: 'date-time' }

    ETL:
      type: object
      properties:
        id: { type: integer, example: 10 }
        nombre: { type: string, example: 'ETL Procesamiento Ventas Diarias' }
        tipo: { type: string, example: 'Diario', nullable: true }
        descripcion: { type: string, example: 'Procesa las ventas consolidadas.', nullable: true }
        createdAt: { type: string, format: 'date-time' }
        updatedAt: { type: string, format: 'date-time' }

    ETLConMensaje:
      allOf:
        - $ref: '#/components/schemas/ETL'
        - type: object
          properties:
            mensaje: { type: string, example: 'ETL creado exitosamente.' }

    ReporteDelDia:
      type: object
      properties:
        idReporte: { type: integer, example: 201 }
        fechaReporte: { type: string, format: 'date-time', example: '2025-05-24T09:00:00.000Z' } # Usa fecha actual
        statusReporte: { type: string, example: 'Exitoso' }
        etl:
          type: object
          properties:
            idEtl: { type: integer, example: 1 }
            nombreEtl: { type: string, example: 'ETL de Ventas' }
            tipoEtl: { type: string, example: 'Diario', nullable: true }

    PermisoDetalle:
      type: object
      properties:
        idPermiso: { type: integer, example: 1 }
        idEtl: { type: integer, example: 10 }
        nombreEtl: { type: string, example: 'ETL Ventas' }
        descripcionEtl: { type: string, nullable: true, example: 'Procesa ventas.' }
        tipoEtl: { type: string, nullable: true, example: 'Diario' }

    PermisosDelUsuarioResponse:
      type: object
      properties:
        idUsuario: { type: integer, example: 1 }
        nombreUsuario: { type: string, example: 'nombre_usuario' }
        permisos:
          type: array
          items:
            $ref: '#/components/schemas/PermisoDetalle'

    CrearUsuarioRequest:
      type: object
      properties:
        nombreUsuario: { type: string, example: 'nuevo_usuario_01' }
        etlIds: { type: 'array', items: { type: 'integer' }, example: [1, 2] }
      required:
        - nombreUsuario
        - etlIds

    ActualizarPermisosRequest:
      type: object
      properties:
        etlIds: { type: 'array', items: { type: 'integer' }, example: [1, 3, 5] }
      required:
        - etlIds

    CrearETLRequest:
      type: object
      properties:
        nombre: { type: string, example: 'ETL Facturación Mensual' }
        tipo: { type: string, example: 'Mensual', nullable: true }
        descripcion: { type: string, example: 'Genera reportes...', nullable: true }
      required:
        - nombre

    ActualizarETLRequest:
      type: object
      properties:
        nombre: { type: string, example: 'ETL Facturación (Actualizado)', nullable: true }
        tipo: { type: string, example: 'Batch Mensual', nullable: true }
        descripcion: { type: string, example: 'Descripción actualizada.', nullable: true }

    DetalleProcesamientoData:
      type: object
      properties:
        nombre:
          type: string
          description: Nombre del paso o tarea de procesamiento.
          example: "Carga de Ventas"
        fecha:
          type: string
          format: date-time
          description: Fecha y hora del paso de procesamiento.
          example: "2025-05-24T08:01:00Z"
        nombreArchivo:
          type: string
          nullable: true
          description: Nombre del archivo relevante para este paso (si aplica).
          example: "ventas_20250523.csv"
        status:
          type: string
          description: Estado del paso de procesamiento.
          example: "OK"
        mensaje:
          type: string
          nullable: true
          description: Mensaje descriptivo del paso.
          example: "15000 filas procesadas."
      required:
        - nombre
        - fecha
        - status

    RegistrarReporteProcesamientoRequest:
      type: object
      properties:
        idEtl:
          type: integer
          description: ID del ETL de tipo Procesamiento que reporta.
          example: 1
        fechaReporte:
          type: string
          format: date-time
          description: Fecha y hora de finalización o generación del reporte general.
          example: "2025-05-24T08:05:00Z"
        statusGeneral:
          type: string
          description: Estado general de la ejecución del ETL (ej. Exitoso, Fallido).
          example: "Exitoso"
        detalleProcesamiento:
          $ref: '#/components/schemas/DetalleProcesamientoData'
      required:
        - idEtl
        - fechaReporte
        - statusGeneral
        - detalleProcesamiento

    RegistroReporteProcesamientoResponse:
      type: object
      properties:
        mensaje:
          type: string
          example: "Reporte de procesamiento registrado exitosamente."
        idReporte:
          type: integer
          example: 101
        idDetalleProcesamiento:
          type: integer
          example: 201

    # -- Detalle para Reporte de Archivo --
    DetalleArchivoData:
      type: object
      properties:
        status:
          type: string
          description: Estado de la operación de archivo.
          example: "Error de Acceso"
        mensaje:
          type: string
          nullable: true
          description: Mensaje descriptivo sobre la operación del archivo.
          example: "No se pudo acceder al directorio SFTP."
      required:
        - status

    RegistrarReporteArchivoRequest:
      type: object
      properties:
        idEtl:
          type: integer
          description: ID del ETL de tipo Archivo que reporta.
          example: 2
        fechaReporte:
          type: string
          format: date-time
          description: Fecha y hora de finalización o generación del reporte general.
          example: "2025-05-24T09:10:00Z"
        statusGeneral:
          type: string
          description: Estado general de la ejecución del ETL.
          example: "Fallido"
        detalleArchivo:
          $ref: '#/components/schemas/DetalleArchivoData'
      required:
        - idEtl
        - fechaReporte
        - statusGeneral
        - detalleArchivo

    RegistroReporteArchivoResponse:
      type: object
      properties:
        mensaje:
          type: string
          example: "Reporte de archivo registrado exitosamente."
        idReporte:
          type: integer
          example: 102
        idDetalleArchivo:
          type: integer
          example: 202

    # -- Detalle para Reporte de Alerta/Ejecución --
    DetalleAlertaData:
      type: object
      properties:
        nombre:
          type: string
          description: Nombre de la alerta o del evento principal de ejecución.
          example: "Finalización Ejecución ETL Inventario"
        hostName:
          type: string
          nullable: true
          description: Hostname donde se ejecutó o se generó la alerta.
          example: "ETLServer02"
        horaInicio:
          type: string
          format: date-time
          description: Hora de inicio del evento o ejecución.
          example: "2025-05-24T10:00:00Z"
        horaFin:
          type: string
          format: date-time
          description: Hora de fin del evento o ejecución.
          example: "2025-05-24T10:15:00Z"
        tiempoEjecucion:
          type: integer
          nullable: true
          description: Tiempo de ejecución en milisegundos.
          example: 900000
      required:
        - nombre
        - horaInicio
        - horaFin

    RegistrarReporteAlertaRequest:
      type: object
      properties:
        idEtl:
          type: integer
          description: ID del ETL de tipo Alerta que reporta.
          example: 3
        fechaReporte:
          type: string
          format: date-time
          description: Fecha y hora de finalización o generación del reporte general (puede ser igual a horaFin).
          example: "2025-05-24T10:15:00Z"
        statusGeneral:
          type: string
          description: Estado general de la ejecución del ETL.
          example: "ExitosoConAlertaLeve"
        detalleAlerta:
          $ref: '#/components/schemas/DetalleAlertaData'
      required:
        - idEtl
        - fechaReporte
        - statusGeneral
        - detalleAlerta

    RegistroReporteAlertaResponse:
      type: object
      properties:
        mensaje:
          type: string
          example: "Reporte de alerta/ejecución registrado exitosamente."
        idReporte:
          type: integer
          example: 103
        idDetalleAlerta:
          type: integer
          example: 203

    LoginRequest:
      type: object
      properties:
        nombreUsuario:
          type: string
          description: Nombre de usuario para el inicio de sesión.
          example: "admin_da"
      required:
        - nombreUsuario

    LoginSuccessResponse:
      type: object
      properties:
        mensaje:
          type: string
          example: "Autenticación exitosa."
        token:
          type: string
          description: "Token de acceso (JWT encriptado y codificado) para solicitudes subsecuentes."
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." # Este es un ejemplo de JWT, el tuyo será el encriptado
        usuario:
          $ref: '#/components/schemas/Usuario' # Reutilizamos el schema de Usuario
      required:
        - mensaje
        - token
        - usuario

    ReporteCriticoNoAcusado:
      type: object
      properties:
        idReporte:
          type: integer
          description: ID del Reporte que tuvo el fallo crítico.
          example: 150
        fechaReporte:
          type: string
          format: date-time
          description: Fecha y hora del reporte crítico.
          example: "2025-05-23T10:00:00.000Z"
        statusReporte:
          type: string
          description: Estado del reporte (debería ser 'Fallido Crítico').
          example: "Fallido Crítico"
        etl:
          type: object
          properties:
            idEtl:
              type: integer
              example: 5
            nombreEtl:
              type: string
              example: "ETL Procesamiento X"
            tipoEtl:
              type: string
              nullable: true
              example: "Nocturno"
        mensajeParaDialogo: # El mensaje que la GUI mostraría
          type: string
          example: "Alerta crítica: Se ha detectado un fallo crítico en el ETL Procesamiento X"

    ReporteConDetalleCompleto:
      type: object
      properties:
        idReporte:
          type: integer
          description: ID del registro de reporte.
          example: 101
        fechaReporte:
          type: string
          format: date-time
          description: Fecha y hora del reporte.
        statusReporte:
          type: string
          description: Estado general del reporte (ej. Exitoso, Fallido Crítico).
          example: "Fallido Crítico"
        etl: # Información del ETL asociado
          type: object
          properties:
            idEtl:
              type: integer
              example: 1
            nombreEtl:
              type: string
              example: "ETL Ventas Diarias"
            tipoEtl:
              type: string
              nullable: true
              example: "Diario"
        # Solo uno de los siguientes tres campos de detalle estará poblado,
        # los otros serán null o no estarán presentes.
        detalleProcesamiento:
          $ref: '#/components/schemas/DetalleProcesamientoData'
          nullable: true
          description: Detalles si el reporte es de tipo Procesamiento.
        detalleArchivo:
          $ref: '#/components/schemas/DetalleArchivoData'
          nullable: true
          description: Detalles si el reporte es de tipo Archivo.
        detalleAlerta:
          $ref: '#/components/schemas/DetalleAlertaData'
          nullable: true
          description: Detalles si el reporte es de tipo Alerta.

security: # Seguridad global por defecto para los endpoints
  - bearerAuth: []

paths:
  /etls: # Ruta base para los ETLs
    get:
      tags:
        - ETLs
      summary: Lista todos los ETLs
      description: Obtiene una lista de todos los ETLs disponibles en el sistema.
      security: # Este endpoint y los siguientes requieren autenticación
        - bearerAuth: []
      responses:
        '200':
          description: Una lista de ETLs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ETL'
        '401':
          description: No autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Prohibido (rol no permitido).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # Puedes añadir más respuestas de error si aplican (ej. 500)

    post:
      tags:
        - ETLs
      summary: Crea un nuevo ETL
      description: Registra un nuevo ETL en el sistema.
      security:
        - bearerAuth: []
      requestBody:
        description: Datos del ETL a crear.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrearETLRequest'
      responses:
        '201':
          description: ETL creado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ETLConMensaje'
        '400':
          description: Datos de entrada inválidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: No autorizado.
        '403':
          description: Prohibido.
        # '409': Conflicto si el nombre ya existe (opcional)

  /etls/{idEtl}: # Ruta para un ETL específico
    get:
      tags:
        - ETLs
      summary: Obtiene un ETL por ID
      description: Recupera los detalles de un ETL específico usando su ID.
      security:
        - bearerAuth: []
      parameters:
        - name: idEtl
          in: path # Parámetro de ruta
          required: true
          description: ID numérico del ETL a obtener.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Detalles del ETL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ETL'
        '404':
          description: ETL no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        # Añade respuestas 401, 403

    put:
      tags:
        - ETLs
      summary: Actualiza un ETL existente
      description: Modifica los detalles de un ETL existente.
      security:
        - bearerAuth: []
      parameters:
        - name: idEtl
          in: path
          required: true
          description: ID numérico del ETL a actualizar.
          schema:
            type: integer
            example: 1
      requestBody:
        description: Campos del ETL a actualizar.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActualizarETLRequest'
      responses:
        '200':
          description: ETL actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ETLConMensaje'
        '400':
          description: Datos de entrada inválidos.
        '404':
          description: ETL no encontrado.
        # Añade respuestas 401, 403, 409

    delete:
      tags:
        - ETLs
      summary: Elimina un ETL
      description: Elimina permanentemente un ETL del sistema.
      security:
        - bearerAuth: []
      parameters:
        - name: idEtl
          in: path
          required: true
          description: ID numérico del ETL a eliminar.
          schema:
            type: integer
            example: 1
      responses:
        '200': # O '204' No Content, si prefieres no devolver cuerpo
          description: ETL eliminado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MensajeExito'
        '404':
          description: ETL no encontrado.
        # Añade respuestas 401, 403
  /usuarios: # Ruta base para los Usuarios
    get:
      tags:
        - Usuarios
      summary: Lista todos los usuarios
      description: Obtiene una lista de todos los usuarios registrados en el sistema. Requiere rol de Administrador.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Una lista de usuarios.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
        '401':
          description: No autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Prohibido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Usuarios
      summary: Agrega un nuevo usuario (CU-01)
      description: Registra un nuevo usuario en el sistema y le asigna permisos iniciales para consultar ETLs. Requiere rol de Administrador.
      security:
        - bearerAuth: []
      requestBody:
        description: Datos del usuario a crear y los IDs de los ETLs a los que tendrá acceso.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrearUsuarioRequest'
      responses:
        '201': # Usuario creado
          description: Usuario creado y permisos asignados correctamente. Devuelve los datos del usuario y los IDs de ETL asignados.
          content:
            application/json:
              schema: # Definimos un esquema específico para esta respuesta
                type: object
                properties:
                  idUsuario: { type: integer, example: 3 }
                  nombreUsuario: { type: string, example: 'nuevo_usuario_01' }
                  # rol: { type: string, example: 'Consultor' } # Si CU-01 asigna un rol por defecto
                  etlIdsAsignados: { type: 'array', items: { type: 'integer' }, example: [1, 2] }
                  mensaje: { type: string, example: 'Usuario creado y permisos asignados correctamente.' }
        '400':
          description: Datos de entrada inválidos (ej. nombreUsuario faltante, etlIds no es un array, o algún etlId no existe).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: No autorizado.
        '403':
          description: Prohibido.
        '409':
          description: Conflicto (ej. el nombre de usuario ya existe).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor.

  /usuarios/{idUsuario}/permisos: # Ruta para gestionar permisos de un usuario específico
    get:
      tags:
        - Usuarios # O podrías tener un tag "Permisos"
      summary: Obtiene los permisos de un usuario específico (CU-02)
      description: Lista los ETLs a los que un usuario específico tiene permiso de acceso. Requiere rol de Administrador.
      security:
        - bearerAuth: []
      parameters:
        - name: idUsuario
          in: path
          required: true
          description: ID numérico del usuario cuyos permisos se quieren obtener.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Lista de permisos del usuario.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermisosDelUsuarioResponse'
        '401':
          description: No autorizado.
        '403':
          description: Prohibido.
        '404':
          description: Usuario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor.

    put:
      tags:
        - Usuarios # O tag "Permisos"
      summary: Actualiza los permisos de un usuario específico (CU-02)
      description: Reemplaza la lista de ETLs a los que un usuario tiene acceso. Enviar un array vacío en etlIds quita todos los permisos. Requiere rol de Administrador.
      security:
        - bearerAuth: []
      parameters:
        - name: idUsuario
          in: path
          required: true
          description: ID numérico del usuario cuyos permisos se van a actualizar.
          schema:
            type: integer
            example: 1
      requestBody:
        description: Lista completa de IDs de ETL a los que el usuario tendrá permiso.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActualizarPermisosRequest'
      responses:
        '200':
          description: Permisos actualizados correctamente.
          content:
            application/json:
              schema: # Respuesta similar a la creación de usuario o una específica para esto
                type: object
                properties:
                  idUsuario: { type: integer, example: 1 }
                  etlIdsAsignados: { type: 'array', items: { type: 'integer' }, example: [1, 3, 5] }
                  mensaje: { type: string, example: 'Permisos actualizados correctamente.' }
        '400':
          description: Datos de entrada inválidos (ej. etlIds no es un array, o algún etlId no existe).
        '401':
          description: No autorizado.
        '403':
          description: Prohibido.
        '404':
          description: Usuario no encontrado.
        '500':
          description: Error interno del servidor.
  /reportes/hoy:
    get:
      tags:
        - Reportes
      summary: Consulta reportes del día actual (CU-06)
      description: |
        Obtiene todos los registros de la tabla Reporte cuya fechaReporte corresponda al día actual.
        - Administradores: Ven todos los reportes del día de todos los ETLs.
        - Consultores: Ven todos los reportes del día, pero solo de los ETLs a los que tienen permiso.
      security:
        - bearerAuth: [] # Requiere token de Administrador o Consultor
      responses:
        '200':
          description: Una lista de reportes del día actual.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReporteDelDia'
        '401':
          description: No autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Prohibido (rol no permitido o consultor sin permisos).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /reportes/por-fecha: # Nueva definición para CU-07
    get:
      tags:
        - Reportes
      summary: Consulta reportes por fecha específica (CU-07)
      description: |
        Obtiene todos los registros de la tabla Reporte cuya fechaReporte corresponda a la fecha especificada en el parámetro de consulta.
        - El formato de fecha es YYYY-MM-DD.
        - Administradores: Ven todos los reportes de la fecha especificada.
        - Consultores: Ven los reportes de la fecha especificada, pero solo de los ETLs a los que tienen permiso.
      security:
        - bearerAuth: [] # Requiere token de Administrador o Consultor
      parameters:
        - name: fecha # Nombre del parámetro de consulta
          in: query # Indica que es un query parameter (ej. /por-fecha?fecha=YYYY-MM-DD)
          required: true
          description: "Fecha para la cual se consultarán los reportes, en formato YYYY-MM-DD."
          schema:
            type: string
            format: date # Esto ayuda a Swagger UI a mostrar un selector de fecha
            example: "2025-05-20" 
      responses:
        '200':
          description: Una lista de reportes para la fecha especificada. El array estará vacío si no se encuentran reportes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReporteDelDia' # Usamos el mismo schema que para /reportes/hoy
        '400':
          description: Error en la solicitud (ej. parámetro 'fecha' faltante o en formato incorrecto).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: No autorizado (token no válido o no provisto).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Prohibido (el rol del usuario no tiene permisos).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /reportes/procesamiento:
    post:
      tags:
        - Reportes
      summary: Registra un reporte de ejecución de un ETL de tipo Procesamiento.
      description: Usado por procesos ETL automatizados para registrar el resultado de su ejecución. No requiere autenticación de usuario.
      security: [] # Anula la seguridad global, este endpoint es para sistemas.
      requestBody:
        description: Datos del reporte de procesamiento.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrarReporteProcesamientoRequest'
      responses:
        '201':
          description: Reporte de procesamiento registrado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistroReporteProcesamientoResponse'
        '400':
          description: Datos de entrada inválidos o faltantes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: ETL con el idEtl especificado no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /reportes/archivo:
    post:
      tags:
        - Reportes
      summary: Registra un reporte de ejecución de un ETL de tipo Archivo.
      description: Usado por procesos ETL automatizados para registrar el resultado de su ejecución. No requiere autenticación de usuario.
      security: [] # Anula la seguridad global.
      requestBody:
        description: Datos del reporte de archivo.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrarReporteArchivoRequest'
      responses:
        '201':
          description: Reporte de archivo registrado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistroReporteArchivoResponse'
        '400':
          description: Datos de entrada inválidos o faltantes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: ETL con el idEtl especificado no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /reportes/alerta:
    post:
      tags:
        - Reportes
      summary: Registra un reporte de ejecución de un ETL de tipo Alerta.
      description: Usado por procesos ETL automatizados para registrar el resultado de su ejecución o una alerta específica. No requiere autenticación de usuario.
      security: [] # Anula la seguridad global.
      requestBody:
        description: Datos del reporte de alerta/ejecución.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrarReporteAlertaRequest'
      responses:
        '201':
          description: Reporte de alerta/ejecución registrado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistroReporteAlertaResponse'
        '400':
          description: Datos de entrada inválidos o faltantes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: ETL con el idEtl especificado no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login: # Se resolverá a /api/auth/login por la config del server
    post:
      tags:
        - Autenticación # Usa el tag que definiste para Autenticación
      summary: Inicia sesión en el sistema.
      description: |
        Autentica a un usuario contra el sistema (actualmente con un Directorio Activo simulado) 
        y devuelve un token JWT (encriptado) si las credenciales y permisos son válidos.
        No se envía contraseña; la autenticación se basa en la existencia del usuario en el DA 
        y su registro y rol/permisos en la base de datos local.
      requestBody:
        description: Nombre de usuario para el inicio de sesión.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200': # Éxito en la autenticación
          description: Autenticación exitosa.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        '400': # Bad Request
          description: Solicitud incorrecta (ej. nombreUsuario faltante o vacío).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401': # Unauthorized
          description: Credenciales inválidas (ej. usuario no reconocido por el directorio activo simulado).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403': # Forbidden
          description: |
            Acceso denegado debido a:
            - Usuario autenticado por el directorio, pero no registrado o habilitado en esta aplicación.
            - Usuario es Consultor pero no tiene permisos ETL asignados.
            - El rol del usuario no permite el acceso al sistema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': # Internal Server Error
          description: Error interno del servidor (ej. error al generar/encriptar token, error de base de datos).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: [] # Indica que este endpoint es público y no requiere el bearerAuth global
  /reportes/criticos-no-acusados: # Endpoint para CU-08
    get:
      tags:
        - Reportes
      summary: Obtiene reportes críticos no acusados por el usuario actual.
      description: |
        Devuelve una lista de reportes con estado 'Fallido Crítico' que el usuario autenticado 
        aún no ha marcado como acusados.
        - Administradores: Ven todos los reportes críticos no acusados aplicables.
        - Consultores: Ven solo de los ETLs a los que tienen permiso.
        Si no hay reportes críticos pendientes para el usuario, devuelve un array vacío.
      security:
        - bearerAuth: [] # Requiere token de Administrador o Consultor
      responses:
        '200':
          description: Una lista de reportes críticos no acusados por el usuario.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReporteCriticoNoAcusado'
        '401':
          description: No autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Prohibido (rol no permitido).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /reportes/{idReporte}/acusar: # Endpoint para CU-08
    post:
      tags:
        - Reportes
      summary: Marca un reporte crítico como acusado por el usuario actual.
      description: |
        Permite al usuario autenticado registrar que ha tomado conocimiento (acusado recibo) 
        de un reporte crítico específico. Esto evita que la notificación de este reporte 
        vuelva a aparecerle.
      security:
        - bearerAuth: [] # Requiere token de Administrador o Consultor
      parameters:
        - name: idReporte
          in: path
          required: true
          description: ID numérico del Reporte crítico que se está acusando.
          schema:
            type: integer
            example: 150
      responses:
        '200': # Si el acuse ya existía pero la operación es idempotente
          description: El usuario ya había acusado recibo de este reporte.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MensajeExito' # Usamos el schema genérico de mensaje
        '201': # Si el acuse se crea exitosamente
          description: Acuse de recibo para el reporte registrado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MensajeExito' # Usamos el schema genérico de mensaje
        '401':
          description: No autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Prohibido (rol no permitido).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Reporte crítico no encontrado con el ID proporcionado, o usuario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /reportes/{idReporte}: # Nueva definición para CU-09 (asumiendo que es /:idReporte y no /:idReporte/detalle)
    get:
      tags:
        - Reportes
      summary: Obtiene el detalle completo de un reporte específico (CU-09).
      description: |
        Recupera la información detallada de un reporte de ejecución de ETL, incluyendo
        los datos del reporte principal, la información del ETL asociado, y los detalles
        específicos de su tipo (Procesamiento, Archivo o Alerta).
        - Administradores: Pueden ver cualquier reporte.
        - Consultores: Solo pueden ver reportes de ETLs para los cuales tienen permiso.
      security:
        - bearerAuth: [] # Requiere token de Administrador o Consultor
      parameters:
        - name: idReporte
          in: path
          required: true
          description: ID numérico del Reporte del cual se desea obtener el detalle.
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: Detalle completo del reporte.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReporteConDetalleCompleto'
        '400':
          description: ID de reporte inválido (ej. no es un número).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: No autorizado (token no válido o no provisto).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Prohibido (rol no permitido o consultor sin permiso para el ETL de este reporte).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Reporte con el ID especificado no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'